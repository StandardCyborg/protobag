// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobagMsg.proto

#include "ProtobagMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobagMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BagMeta_TopicStats_ProtobagMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobagMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BagMeta_TopicToStatsEntry_DoNotUse_ProtobagMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobagMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Selection_Events_ProtobagMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobagMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Selection_Window_ProtobagMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobagMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicTime_ProtobagMsg_2eproto;
namespace protobag {
class StampedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StampedMessage> _instance;
} _StampedMessage_default_instance_;
class StdMsg_BoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdMsg_Bool> _instance;
} _StdMsg_Bool_default_instance_;
class StdMsg_IntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdMsg_Int> _instance;
} _StdMsg_Int_default_instance_;
class StdMsg_FloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdMsg_Float> _instance;
} _StdMsg_Float_default_instance_;
class StdMsg_StringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdMsg_String> _instance;
} _StdMsg_String_default_instance_;
class StdMsg_BytesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdMsg_Bytes> _instance;
} _StdMsg_Bytes_default_instance_;
class StdMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StdMsg> _instance;
} _StdMsg_default_instance_;
class TopicTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicTime> _instance;
} _TopicTime_default_instance_;
class Selection_WindowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Selection_Window> _instance;
} _Selection_Window_default_instance_;
class Selection_EventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Selection_Events> _instance;
} _Selection_Events_default_instance_;
class SelectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Selection> _instance;
  const ::protobag::Selection_Window* window_;
  const ::protobag::Selection_Events* events_;
} _Selection_default_instance_;
class BagMeta_TopicStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BagMeta_TopicStats> _instance;
} _BagMeta_TopicStats_default_instance_;
class BagMeta_TopicToStatsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BagMeta_TopicToStatsEntry_DoNotUse> _instance;
} _BagMeta_TopicToStatsEntry_DoNotUse_default_instance_;
class BagMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BagMeta> _instance;
} _BagMeta_default_instance_;
}  // namespace protobag
static void InitDefaultsscc_info_BagMeta_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_BagMeta_default_instance_;
    new (ptr) ::protobag::BagMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::BagMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BagMeta_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BagMeta_ProtobagMsg_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_BagMeta_TopicToStatsEntry_DoNotUse_ProtobagMsg_2eproto.base,
      &scc_info_TopicTime_ProtobagMsg_2eproto.base,}};

static void InitDefaultsscc_info_BagMeta_TopicStats_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_BagMeta_TopicStats_default_instance_;
    new (ptr) ::protobag::BagMeta_TopicStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::BagMeta_TopicStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BagMeta_TopicStats_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BagMeta_TopicStats_ProtobagMsg_2eproto}, {}};

static void InitDefaultsscc_info_BagMeta_TopicToStatsEntry_DoNotUse_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_BagMeta_TopicToStatsEntry_DoNotUse_default_instance_;
    new (ptr) ::protobag::BagMeta_TopicToStatsEntry_DoNotUse();
  }
  ::protobag::BagMeta_TopicToStatsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BagMeta_TopicToStatsEntry_DoNotUse_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BagMeta_TopicToStatsEntry_DoNotUse_ProtobagMsg_2eproto}, {
      &scc_info_BagMeta_TopicStats_ProtobagMsg_2eproto.base,}};

static void InitDefaultsscc_info_Selection_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_Selection_default_instance_;
    new (ptr) ::protobag::Selection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::Selection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Selection_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Selection_ProtobagMsg_2eproto}, {
      &scc_info_Selection_Window_ProtobagMsg_2eproto.base,
      &scc_info_Selection_Events_ProtobagMsg_2eproto.base,}};

static void InitDefaultsscc_info_Selection_Events_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_Selection_Events_default_instance_;
    new (ptr) ::protobag::Selection_Events();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::Selection_Events::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Selection_Events_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Selection_Events_ProtobagMsg_2eproto}, {
      &scc_info_TopicTime_ProtobagMsg_2eproto.base,}};

static void InitDefaultsscc_info_Selection_Window_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_Selection_Window_default_instance_;
    new (ptr) ::protobag::Selection_Window();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::Selection_Window::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Selection_Window_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Selection_Window_ProtobagMsg_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_StampedMessage_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_StampedMessage_default_instance_;
    new (ptr) ::protobag::StampedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::StampedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StampedMessage_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StampedMessage_ProtobagMsg_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_StdMsg_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_StdMsg_default_instance_;
    new (ptr) ::protobag::StdMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::StdMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StdMsg_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StdMsg_ProtobagMsg_2eproto}, {}};

static void InitDefaultsscc_info_StdMsg_Bool_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_StdMsg_Bool_default_instance_;
    new (ptr) ::protobag::StdMsg_Bool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::StdMsg_Bool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StdMsg_Bool_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StdMsg_Bool_ProtobagMsg_2eproto}, {}};

static void InitDefaultsscc_info_StdMsg_Bytes_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_StdMsg_Bytes_default_instance_;
    new (ptr) ::protobag::StdMsg_Bytes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::StdMsg_Bytes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StdMsg_Bytes_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StdMsg_Bytes_ProtobagMsg_2eproto}, {}};

static void InitDefaultsscc_info_StdMsg_Float_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_StdMsg_Float_default_instance_;
    new (ptr) ::protobag::StdMsg_Float();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::StdMsg_Float::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StdMsg_Float_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StdMsg_Float_ProtobagMsg_2eproto}, {}};

static void InitDefaultsscc_info_StdMsg_Int_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_StdMsg_Int_default_instance_;
    new (ptr) ::protobag::StdMsg_Int();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::StdMsg_Int::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StdMsg_Int_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StdMsg_Int_ProtobagMsg_2eproto}, {}};

static void InitDefaultsscc_info_StdMsg_String_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_StdMsg_String_default_instance_;
    new (ptr) ::protobag::StdMsg_String();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::StdMsg_String::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StdMsg_String_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StdMsg_String_ProtobagMsg_2eproto}, {}};

static void InitDefaultsscc_info_TopicTime_ProtobagMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobag::_TopicTime_default_instance_;
    new (ptr) ::protobag::TopicTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobag::TopicTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicTime_ProtobagMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicTime_ProtobagMsg_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProtobagMsg_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ProtobagMsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProtobagMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProtobagMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::StampedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::StampedMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobag::StampedMessage, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Bool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Bool, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Int, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Float, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_String, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Bytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg_Bytes, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::StdMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::TopicTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::TopicTime, topic_),
  PROTOBUF_FIELD_OFFSET(::protobag::TopicTime, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobag::TopicTime, entryname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::Selection_Window, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::Selection_Window, topics_),
  PROTOBUF_FIELD_OFFSET(::protobag::Selection_Window, start_),
  PROTOBUF_FIELD_OFFSET(::protobag::Selection_Window, end_),
  PROTOBUF_FIELD_OFFSET(::protobag::Selection_Window, exclude_topics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::Selection_Events, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::Selection_Events, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::Selection, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobag::Selection, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protobag::SelectionDefaultTypeInternal, window_),
  offsetof(::protobag::SelectionDefaultTypeInternal, events_),
  PROTOBUF_FIELD_OFFSET(::protobag::Selection, criteria_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta_TopicStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta_TopicStats, n_messages_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta_TopicToStatsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta_TopicToStatsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta_TopicToStatsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta_TopicToStatsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta, bag_namespace_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta, start_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta, end_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta, protobag_version_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta, topic_to_stats_),
  PROTOBUF_FIELD_OFFSET(::protobag::BagMeta, time_ordered_entries_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protobag::StampedMessage)},
  { 7, -1, sizeof(::protobag::StdMsg_Bool)},
  { 13, -1, sizeof(::protobag::StdMsg_Int)},
  { 19, -1, sizeof(::protobag::StdMsg_Float)},
  { 25, -1, sizeof(::protobag::StdMsg_String)},
  { 31, -1, sizeof(::protobag::StdMsg_Bytes)},
  { 37, -1, sizeof(::protobag::StdMsg)},
  { 42, -1, sizeof(::protobag::TopicTime)},
  { 50, -1, sizeof(::protobag::Selection_Window)},
  { 59, -1, sizeof(::protobag::Selection_Events)},
  { 65, -1, sizeof(::protobag::Selection)},
  { 73, -1, sizeof(::protobag::BagMeta_TopicStats)},
  { 79, 86, sizeof(::protobag::BagMeta_TopicToStatsEntry_DoNotUse)},
  { 88, -1, sizeof(::protobag::BagMeta)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_StampedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_StdMsg_Bool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_StdMsg_Int_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_StdMsg_Float_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_StdMsg_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_StdMsg_Bytes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_StdMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_TopicTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_Selection_Window_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_Selection_Events_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_Selection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_BagMeta_TopicStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_BagMeta_TopicToStatsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobag::_BagMeta_default_instance_),
};

const char descriptor_table_protodef_ProtobagMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ProtobagMsg.proto\022\010protobag\032\031google/pr"
  "otobuf/any.proto\032\037google/protobuf/timest"
  "amp.proto\"b\n\016StampedMessage\022-\n\ttimestamp"
  "\030\001 \001(\0132\032.google.protobuf.Timestamp\022!\n\003ms"
  "g\030\002 \001(\0132\024.google.protobuf.Any\"~\n\006StdMsg\032"
  "\025\n\004Bool\022\r\n\005value\030\001 \001(\010\032\024\n\003Int\022\r\n\005value\030\001"
  " \001(\003\032\026\n\005Float\022\r\n\005value\030\001 \001(\002\032\027\n\006String\022\r"
  "\n\005value\030\001 \001(\t\032\026\n\005Bytes\022\r\n\005value\030\001 \001(\014\"\\\n"
  "\tTopicTime\022\r\n\005topic\030\001 \001(\t\022-\n\ttimestamp\030\002"
  " \001(\0132\032.google.protobuf.Timestamp\022\021\n\tentr"
  "yname\030\n \001(\t\"\251\002\n\tSelection\022,\n\006window\030\001 \001("
  "\0132\032.protobag.Selection.WindowH\000\022,\n\006event"
  "s\030\002 \001(\0132\032.protobag.Selection.EventsH\000\032\204\001"
  "\n\006Window\022\016\n\006topics\030\001 \003(\t\022)\n\005start\030\002 \001(\0132"
  "\032.google.protobuf.Timestamp\022\'\n\003end\030\003 \001(\013"
  "2\032.google.protobuf.Timestamp\022\026\n\016exclude_"
  "topics\030\004 \003(\t\032-\n\006Events\022#\n\006events\030\n \003(\0132\023"
  ".protobag.TopicTimeB\n\n\010criteria\"\363\002\n\007BagM"
  "eta\022\025\n\rbag_namespace\030\001 \001(\t\022)\n\005start\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022\'\n\003end\030\003 \001"
  "(\0132\032.google.protobuf.Timestamp\022\030\n\020protob"
  "ag_version\030\n \001(\t\022;\n\016topic_to_stats\030\024 \003(\013"
  "2#.protobag.BagMeta.TopicToStatsEntry\0221\n"
  "\024time_ordered_entries\030\036 \003(\0132\023.protobag.T"
  "opicTime\032 \n\nTopicStats\022\022\n\nn_messages\030\001 \001"
  "(\003\032Q\n\021TopicToStatsEntry\022\013\n\003key\030\001 \001(\t\022+\n\005"
  "value\030\002 \001(\0132\034.protobag.BagMeta.TopicStat"
  "s:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProtobagMsg_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProtobagMsg_2eproto_sccs[14] = {
  &scc_info_BagMeta_ProtobagMsg_2eproto.base,
  &scc_info_BagMeta_TopicStats_ProtobagMsg_2eproto.base,
  &scc_info_BagMeta_TopicToStatsEntry_DoNotUse_ProtobagMsg_2eproto.base,
  &scc_info_Selection_ProtobagMsg_2eproto.base,
  &scc_info_Selection_Events_ProtobagMsg_2eproto.base,
  &scc_info_Selection_Window_ProtobagMsg_2eproto.base,
  &scc_info_StampedMessage_ProtobagMsg_2eproto.base,
  &scc_info_StdMsg_ProtobagMsg_2eproto.base,
  &scc_info_StdMsg_Bool_ProtobagMsg_2eproto.base,
  &scc_info_StdMsg_Bytes_ProtobagMsg_2eproto.base,
  &scc_info_StdMsg_Float_ProtobagMsg_2eproto.base,
  &scc_info_StdMsg_Int_ProtobagMsg_2eproto.base,
  &scc_info_StdMsg_String_ProtobagMsg_2eproto.base,
  &scc_info_TopicTime_ProtobagMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProtobagMsg_2eproto_once;
static bool descriptor_table_ProtobagMsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtobagMsg_2eproto = {
  &descriptor_table_ProtobagMsg_2eproto_initialized, descriptor_table_protodef_ProtobagMsg_2eproto, "ProtobagMsg.proto", 1093,
  &descriptor_table_ProtobagMsg_2eproto_once, descriptor_table_ProtobagMsg_2eproto_sccs, descriptor_table_ProtobagMsg_2eproto_deps, 14, 2,
  schemas, file_default_instances, TableStruct_ProtobagMsg_2eproto::offsets,
  file_level_metadata_ProtobagMsg_2eproto, 14, file_level_enum_descriptors_ProtobagMsg_2eproto, file_level_service_descriptors_ProtobagMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProtobagMsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProtobagMsg_2eproto), true);
namespace protobag {

// ===================================================================

void StampedMessage::InitAsDefaultInstance() {
  ::protobag::_StampedMessage_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::protobag::_StampedMessage_default_instance_._instance.get_mutable()->msg_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class StampedMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const StampedMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& msg(const StampedMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
StampedMessage::_Internal::timestamp(const StampedMessage* msg) {
  return *msg->timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Any&
StampedMessage::_Internal::msg(const StampedMessage* msg) {
  return *msg->msg_;
}
void StampedMessage::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void StampedMessage::clear_msg() {
  if (GetArenaNoVirtual() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
StampedMessage::StampedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.StampedMessage)
}
StampedMessage::StampedMessage(const StampedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_msg()) {
    msg_ = new PROTOBUF_NAMESPACE_ID::Any(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobag.StampedMessage)
}

void StampedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StampedMessage_ProtobagMsg_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(msg_));
}

StampedMessage::~StampedMessage() {
  // @@protoc_insertion_point(destructor:protobag.StampedMessage)
  SharedDtor();
}

void StampedMessage::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete msg_;
}

void StampedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StampedMessage& StampedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StampedMessage_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void StampedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.StampedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StampedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StampedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.StampedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .google.protobuf.Any msg = 2;
  if (this->has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.StampedMessage)
  return target;
}

size_t StampedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.StampedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .google.protobuf.Any msg = 2;
  if (this->has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StampedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.StampedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StampedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StampedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.StampedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.StampedMessage)
    MergeFrom(*source);
  }
}

void StampedMessage::MergeFrom(const StampedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.StampedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_msg()) {
    _internal_mutable_msg()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_msg());
  }
}

void StampedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.StampedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StampedMessage::CopyFrom(const StampedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.StampedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StampedMessage::IsInitialized() const {
  return true;
}

void StampedMessage::InternalSwap(StampedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StampedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdMsg_Bool::InitAsDefaultInstance() {
}
class StdMsg_Bool::_Internal {
 public:
};

StdMsg_Bool::StdMsg_Bool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.StdMsg.Bool)
}
StdMsg_Bool::StdMsg_Bool(const StdMsg_Bool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protobag.StdMsg.Bool)
}

void StdMsg_Bool::SharedCtor() {
  value_ = false;
}

StdMsg_Bool::~StdMsg_Bool() {
  // @@protoc_insertion_point(destructor:protobag.StdMsg.Bool)
  SharedDtor();
}

void StdMsg_Bool::SharedDtor() {
}

void StdMsg_Bool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdMsg_Bool& StdMsg_Bool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdMsg_Bool_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void StdMsg_Bool::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.StdMsg.Bool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear();
}

const char* StdMsg_Bool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdMsg_Bool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.StdMsg.Bool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.StdMsg.Bool)
  return target;
}

size_t StdMsg_Bool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.StdMsg.Bool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdMsg_Bool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.StdMsg.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  const StdMsg_Bool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdMsg_Bool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.StdMsg.Bool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.StdMsg.Bool)
    MergeFrom(*source);
  }
}

void StdMsg_Bool::MergeFrom(const StdMsg_Bool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.StdMsg.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void StdMsg_Bool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.StdMsg.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdMsg_Bool::CopyFrom(const StdMsg_Bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.StdMsg.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdMsg_Bool::IsInitialized() const {
  return true;
}

void StdMsg_Bool::InternalSwap(StdMsg_Bool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StdMsg_Bool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdMsg_Int::InitAsDefaultInstance() {
}
class StdMsg_Int::_Internal {
 public:
};

StdMsg_Int::StdMsg_Int()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.StdMsg.Int)
}
StdMsg_Int::StdMsg_Int(const StdMsg_Int& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protobag.StdMsg.Int)
}

void StdMsg_Int::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

StdMsg_Int::~StdMsg_Int() {
  // @@protoc_insertion_point(destructor:protobag.StdMsg.Int)
  SharedDtor();
}

void StdMsg_Int::SharedDtor() {
}

void StdMsg_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdMsg_Int& StdMsg_Int::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdMsg_Int_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void StdMsg_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.StdMsg.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* StdMsg_Int::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdMsg_Int::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.StdMsg.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.StdMsg.Int)
  return target;
}

size_t StdMsg_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.StdMsg.Int)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdMsg_Int::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.StdMsg.Int)
  GOOGLE_DCHECK_NE(&from, this);
  const StdMsg_Int* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdMsg_Int>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.StdMsg.Int)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.StdMsg.Int)
    MergeFrom(*source);
  }
}

void StdMsg_Int::MergeFrom(const StdMsg_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.StdMsg.Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void StdMsg_Int::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.StdMsg.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdMsg_Int::CopyFrom(const StdMsg_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.StdMsg.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdMsg_Int::IsInitialized() const {
  return true;
}

void StdMsg_Int::InternalSwap(StdMsg_Int* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StdMsg_Int::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdMsg_Float::InitAsDefaultInstance() {
}
class StdMsg_Float::_Internal {
 public:
};

StdMsg_Float::StdMsg_Float()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.StdMsg.Float)
}
StdMsg_Float::StdMsg_Float(const StdMsg_Float& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protobag.StdMsg.Float)
}

void StdMsg_Float::SharedCtor() {
  value_ = 0;
}

StdMsg_Float::~StdMsg_Float() {
  // @@protoc_insertion_point(destructor:protobag.StdMsg.Float)
  SharedDtor();
}

void StdMsg_Float::SharedDtor() {
}

void StdMsg_Float::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdMsg_Float& StdMsg_Float::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdMsg_Float_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void StdMsg_Float::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.StdMsg.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

const char* StdMsg_Float::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdMsg_Float::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.StdMsg.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.StdMsg.Float)
  return target;
}

size_t StdMsg_Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.StdMsg.Float)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdMsg_Float::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.StdMsg.Float)
  GOOGLE_DCHECK_NE(&from, this);
  const StdMsg_Float* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdMsg_Float>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.StdMsg.Float)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.StdMsg.Float)
    MergeFrom(*source);
  }
}

void StdMsg_Float::MergeFrom(const StdMsg_Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.StdMsg.Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void StdMsg_Float::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.StdMsg.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdMsg_Float::CopyFrom(const StdMsg_Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.StdMsg.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdMsg_Float::IsInitialized() const {
  return true;
}

void StdMsg_Float::InternalSwap(StdMsg_Float* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StdMsg_Float::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdMsg_String::InitAsDefaultInstance() {
}
class StdMsg_String::_Internal {
 public:
};

StdMsg_String::StdMsg_String()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.StdMsg.String)
}
StdMsg_String::StdMsg_String(const StdMsg_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:protobag.StdMsg.String)
}

void StdMsg_String::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StdMsg_String_ProtobagMsg_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StdMsg_String::~StdMsg_String() {
  // @@protoc_insertion_point(destructor:protobag.StdMsg.String)
  SharedDtor();
}

void StdMsg_String::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StdMsg_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdMsg_String& StdMsg_String::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdMsg_String_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void StdMsg_String::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.StdMsg.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StdMsg_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobag.StdMsg.String.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdMsg_String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.StdMsg.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobag.StdMsg.String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.StdMsg.String)
  return target;
}

size_t StdMsg_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.StdMsg.String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdMsg_String::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.StdMsg.String)
  GOOGLE_DCHECK_NE(&from, this);
  const StdMsg_String* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdMsg_String>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.StdMsg.String)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.StdMsg.String)
    MergeFrom(*source);
  }
}

void StdMsg_String::MergeFrom(const StdMsg_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.StdMsg.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StdMsg_String::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.StdMsg.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdMsg_String::CopyFrom(const StdMsg_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.StdMsg.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdMsg_String::IsInitialized() const {
  return true;
}

void StdMsg_String::InternalSwap(StdMsg_String* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StdMsg_String::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdMsg_Bytes::InitAsDefaultInstance() {
}
class StdMsg_Bytes::_Internal {
 public:
};

StdMsg_Bytes::StdMsg_Bytes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.StdMsg.Bytes)
}
StdMsg_Bytes::StdMsg_Bytes(const StdMsg_Bytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:protobag.StdMsg.Bytes)
}

void StdMsg_Bytes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StdMsg_Bytes_ProtobagMsg_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StdMsg_Bytes::~StdMsg_Bytes() {
  // @@protoc_insertion_point(destructor:protobag.StdMsg.Bytes)
  SharedDtor();
}

void StdMsg_Bytes::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StdMsg_Bytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdMsg_Bytes& StdMsg_Bytes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdMsg_Bytes_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void StdMsg_Bytes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.StdMsg.Bytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StdMsg_Bytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdMsg_Bytes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.StdMsg.Bytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.StdMsg.Bytes)
  return target;
}

size_t StdMsg_Bytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.StdMsg.Bytes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdMsg_Bytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.StdMsg.Bytes)
  GOOGLE_DCHECK_NE(&from, this);
  const StdMsg_Bytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdMsg_Bytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.StdMsg.Bytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.StdMsg.Bytes)
    MergeFrom(*source);
  }
}

void StdMsg_Bytes::MergeFrom(const StdMsg_Bytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.StdMsg.Bytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StdMsg_Bytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.StdMsg.Bytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdMsg_Bytes::CopyFrom(const StdMsg_Bytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.StdMsg.Bytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdMsg_Bytes::IsInitialized() const {
  return true;
}

void StdMsg_Bytes::InternalSwap(StdMsg_Bytes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StdMsg_Bytes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StdMsg::InitAsDefaultInstance() {
}
class StdMsg::_Internal {
 public:
};

StdMsg::StdMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.StdMsg)
}
StdMsg::StdMsg(const StdMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobag.StdMsg)
}

void StdMsg::SharedCtor() {
}

StdMsg::~StdMsg() {
  // @@protoc_insertion_point(destructor:protobag.StdMsg)
  SharedDtor();
}

void StdMsg::SharedDtor() {
}

void StdMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StdMsg& StdMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StdMsg_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void StdMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.StdMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StdMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StdMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.StdMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.StdMsg)
  return target;
}

size_t StdMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.StdMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StdMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.StdMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StdMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StdMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.StdMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.StdMsg)
    MergeFrom(*source);
  }
}

void StdMsg::MergeFrom(const StdMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.StdMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StdMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.StdMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdMsg::CopyFrom(const StdMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.StdMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdMsg::IsInitialized() const {
  return true;
}

void StdMsg::InternalSwap(StdMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StdMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicTime::InitAsDefaultInstance() {
  ::protobag::_TopicTime_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TopicTime::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const TopicTime* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TopicTime::_Internal::timestamp(const TopicTime* msg) {
  return *msg->timestamp_;
}
void TopicTime::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
TopicTime::TopicTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.TopicTime)
}
TopicTime::TopicTime(const TopicTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  entryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entryname().empty()) {
    entryname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryname_);
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobag.TopicTime)
}

void TopicTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicTime_ProtobagMsg_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = nullptr;
}

TopicTime::~TopicTime() {
  // @@protoc_insertion_point(destructor:protobag.TopicTime)
  SharedDtor();
}

void TopicTime::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void TopicTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicTime& TopicTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicTime_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void TopicTime::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.TopicTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TopicTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobag.TopicTime.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entryname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_entryname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobag.TopicTime.entryname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.TopicTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobag.TopicTime.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // string entryname = 10;
  if (this->entryname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entryname().data(), static_cast<int>(this->_internal_entryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobag.TopicTime.entryname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_entryname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.TopicTime)
  return target;
}

size_t TopicTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.TopicTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string entryname = 10;
  if (this->entryname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entryname());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.TopicTime)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.TopicTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.TopicTime)
    MergeFrom(*source);
  }
}

void TopicTime::MergeFrom(const TopicTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.TopicTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.entryname().size() > 0) {

    entryname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryname_);
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void TopicTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.TopicTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicTime::CopyFrom(const TopicTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.TopicTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicTime::IsInitialized() const {
  return true;
}

void TopicTime::InternalSwap(TopicTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entryname_.Swap(&other->entryname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Selection_Window::InitAsDefaultInstance() {
  ::protobag::_Selection_Window_default_instance_._instance.get_mutable()->start_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::protobag::_Selection_Window_default_instance_._instance.get_mutable()->end_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Selection_Window::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start(const Selection_Window* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end(const Selection_Window* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Selection_Window::_Internal::start(const Selection_Window* msg) {
  return *msg->start_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Selection_Window::_Internal::end(const Selection_Window* msg) {
  return *msg->end_;
}
void Selection_Window::clear_start() {
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void Selection_Window::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
Selection_Window::Selection_Window()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.Selection.Window)
}
Selection_Window::Selection_Window(const Selection_Window& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      topics_(from.topics_),
      exclude_topics_(from.exclude_topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobag.Selection.Window)
}

void Selection_Window::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Selection_Window_ProtobagMsg_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Selection_Window::~Selection_Window() {
  // @@protoc_insertion_point(destructor:protobag.Selection.Window)
  SharedDtor();
}

void Selection_Window::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void Selection_Window::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Selection_Window& Selection_Window::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Selection_Window_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void Selection_Window::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.Selection.Window)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  exclude_topics_.Clear();
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Selection_Window::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string topics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobag.Selection.Window.topics"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_topics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobag.Selection.Window.exclude_topics"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Selection_Window::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.Selection.Window)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string topics = 1;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobag.Selection.Window.topics");
    target = stream->WriteString(1, s, target);
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // repeated string exclude_topics = 4;
  for (int i = 0, n = this->_internal_exclude_topics_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobag.Selection.Window.exclude_topics");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.Selection.Window)
  return target;
}

size_t Selection_Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.Selection.Window)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string topics = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topics_.size());
  for (int i = 0, n = topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      topics_.Get(i));
  }

  // repeated string exclude_topics = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(exclude_topics_.size());
  for (int i = 0, n = exclude_topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      exclude_topics_.Get(i));
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Selection_Window::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.Selection.Window)
  GOOGLE_DCHECK_NE(&from, this);
  const Selection_Window* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Selection_Window>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.Selection.Window)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.Selection.Window)
    MergeFrom(*source);
  }
}

void Selection_Window::MergeFrom(const Selection_Window& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.Selection.Window)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  exclude_topics_.MergeFrom(from.exclude_topics_);
  if (from.has_start()) {
    _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
}

void Selection_Window::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.Selection.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selection_Window::CopyFrom(const Selection_Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.Selection.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection_Window::IsInitialized() const {
  return true;
}

void Selection_Window::InternalSwap(Selection_Window* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  exclude_topics_.InternalSwap(&other->exclude_topics_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Selection_Window::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Selection_Events::InitAsDefaultInstance() {
}
class Selection_Events::_Internal {
 public:
};

Selection_Events::Selection_Events()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.Selection.Events)
}
Selection_Events::Selection_Events(const Selection_Events& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobag.Selection.Events)
}

void Selection_Events::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Selection_Events_ProtobagMsg_2eproto.base);
}

Selection_Events::~Selection_Events() {
  // @@protoc_insertion_point(destructor:protobag.Selection.Events)
  SharedDtor();
}

void Selection_Events::SharedDtor() {
}

void Selection_Events::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Selection_Events& Selection_Events::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Selection_Events_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void Selection_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.Selection.Events)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear();
}

const char* Selection_Events::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protobag.TopicTime events = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Selection_Events::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.Selection.Events)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobag.TopicTime events = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.Selection.Events)
  return target;
}

size_t Selection_Events::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.Selection.Events)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobag.TopicTime events = 10;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Selection_Events::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.Selection.Events)
  GOOGLE_DCHECK_NE(&from, this);
  const Selection_Events* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Selection_Events>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.Selection.Events)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.Selection.Events)
    MergeFrom(*source);
  }
}

void Selection_Events::MergeFrom(const Selection_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.Selection.Events)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void Selection_Events::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.Selection.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selection_Events::CopyFrom(const Selection_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.Selection.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection_Events::IsInitialized() const {
  return true;
}

void Selection_Events::InternalSwap(Selection_Events* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Selection_Events::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Selection::InitAsDefaultInstance() {
  ::protobag::_Selection_default_instance_.window_ = const_cast< ::protobag::Selection_Window*>(
      ::protobag::Selection_Window::internal_default_instance());
  ::protobag::_Selection_default_instance_.events_ = const_cast< ::protobag::Selection_Events*>(
      ::protobag::Selection_Events::internal_default_instance());
}
class Selection::_Internal {
 public:
  static const ::protobag::Selection_Window& window(const Selection* msg);
  static const ::protobag::Selection_Events& events(const Selection* msg);
};

const ::protobag::Selection_Window&
Selection::_Internal::window(const Selection* msg) {
  return *msg->criteria_.window_;
}
const ::protobag::Selection_Events&
Selection::_Internal::events(const Selection* msg) {
  return *msg->criteria_.events_;
}
void Selection::set_allocated_window(::protobag::Selection_Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_criteria();
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    set_has_window();
    criteria_.window_ = window;
  }
  // @@protoc_insertion_point(field_set_allocated:protobag.Selection.window)
}
void Selection::set_allocated_events(::protobag::Selection_Events* events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_criteria();
  if (events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, events, submessage_arena);
    }
    set_has_events();
    criteria_.events_ = events;
  }
  // @@protoc_insertion_point(field_set_allocated:protobag.Selection.events)
}
Selection::Selection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.Selection)
}
Selection::Selection(const Selection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_criteria();
  switch (from.criteria_case()) {
    case kWindow: {
      _internal_mutable_window()->::protobag::Selection_Window::MergeFrom(from._internal_window());
      break;
    }
    case kEvents: {
      _internal_mutable_events()->::protobag::Selection_Events::MergeFrom(from._internal_events());
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobag.Selection)
}

void Selection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Selection_ProtobagMsg_2eproto.base);
  clear_has_criteria();
}

Selection::~Selection() {
  // @@protoc_insertion_point(destructor:protobag.Selection)
  SharedDtor();
}

void Selection::SharedDtor() {
  if (has_criteria()) {
    clear_criteria();
  }
}

void Selection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Selection& Selection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Selection_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void Selection::clear_criteria() {
// @@protoc_insertion_point(one_of_clear_start:protobag.Selection)
  switch (criteria_case()) {
    case kWindow: {
      delete criteria_.window_;
      break;
    }
    case kEvents: {
      delete criteria_.events_;
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CRITERIA_NOT_SET;
}


void Selection::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.Selection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_criteria();
  _internal_metadata_.Clear();
}

const char* Selection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protobag.Selection.Window window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobag.Selection.Events events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Selection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.Selection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobag.Selection.Window window = 1;
  if (_internal_has_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::window(this), target, stream);
  }

  // .protobag.Selection.Events events = 2;
  if (_internal_has_events()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::events(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.Selection)
  return target;
}

size_t Selection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.Selection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (criteria_case()) {
    // .protobag.Selection.Window window = 1;
    case kWindow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *criteria_.window_);
      break;
    }
    // .protobag.Selection.Events events = 2;
    case kEvents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *criteria_.events_);
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Selection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  const Selection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Selection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.Selection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.Selection)
    MergeFrom(*source);
  }
}

void Selection::MergeFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.Selection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.criteria_case()) {
    case kWindow: {
      _internal_mutable_window()->::protobag::Selection_Window::MergeFrom(from._internal_window());
      break;
    }
    case kEvents: {
      _internal_mutable_events()->::protobag::Selection_Events::MergeFrom(from._internal_events());
      break;
    }
    case CRITERIA_NOT_SET: {
      break;
    }
  }
}

void Selection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selection::CopyFrom(const Selection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.Selection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selection::IsInitialized() const {
  return true;
}

void Selection::InternalSwap(Selection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(criteria_, other->criteria_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Selection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BagMeta_TopicStats::InitAsDefaultInstance() {
}
class BagMeta_TopicStats::_Internal {
 public:
};

BagMeta_TopicStats::BagMeta_TopicStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.BagMeta.TopicStats)
}
BagMeta_TopicStats::BagMeta_TopicStats(const BagMeta_TopicStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n_messages_ = from.n_messages_;
  // @@protoc_insertion_point(copy_constructor:protobag.BagMeta.TopicStats)
}

void BagMeta_TopicStats::SharedCtor() {
  n_messages_ = PROTOBUF_LONGLONG(0);
}

BagMeta_TopicStats::~BagMeta_TopicStats() {
  // @@protoc_insertion_point(destructor:protobag.BagMeta.TopicStats)
  SharedDtor();
}

void BagMeta_TopicStats::SharedDtor() {
}

void BagMeta_TopicStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BagMeta_TopicStats& BagMeta_TopicStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BagMeta_TopicStats_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void BagMeta_TopicStats::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.BagMeta.TopicStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_messages_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* BagMeta_TopicStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 n_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BagMeta_TopicStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.BagMeta.TopicStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 n_messages = 1;
  if (this->n_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_n_messages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.BagMeta.TopicStats)
  return target;
}

size_t BagMeta_TopicStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.BagMeta.TopicStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 n_messages = 1;
  if (this->n_messages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n_messages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BagMeta_TopicStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.BagMeta.TopicStats)
  GOOGLE_DCHECK_NE(&from, this);
  const BagMeta_TopicStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BagMeta_TopicStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.BagMeta.TopicStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.BagMeta.TopicStats)
    MergeFrom(*source);
  }
}

void BagMeta_TopicStats::MergeFrom(const BagMeta_TopicStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.BagMeta.TopicStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n_messages() != 0) {
    _internal_set_n_messages(from._internal_n_messages());
  }
}

void BagMeta_TopicStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.BagMeta.TopicStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagMeta_TopicStats::CopyFrom(const BagMeta_TopicStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.BagMeta.TopicStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagMeta_TopicStats::IsInitialized() const {
  return true;
}

void BagMeta_TopicStats::InternalSwap(BagMeta_TopicStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n_messages_, other->n_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BagMeta_TopicStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BagMeta_TopicToStatsEntry_DoNotUse::BagMeta_TopicToStatsEntry_DoNotUse() {}
BagMeta_TopicToStatsEntry_DoNotUse::BagMeta_TopicToStatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BagMeta_TopicToStatsEntry_DoNotUse::MergeFrom(const BagMeta_TopicToStatsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BagMeta_TopicToStatsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BagMeta_TopicToStatsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BagMeta::InitAsDefaultInstance() {
  ::protobag::_BagMeta_default_instance_._instance.get_mutable()->start_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::protobag::_BagMeta_default_instance_._instance.get_mutable()->end_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class BagMeta::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start(const BagMeta* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end(const BagMeta* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
BagMeta::_Internal::start(const BagMeta* msg) {
  return *msg->start_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
BagMeta::_Internal::end(const BagMeta* msg) {
  return *msg->end_;
}
void BagMeta::clear_start() {
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void BagMeta::clear_end() {
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
BagMeta::BagMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobag.BagMeta)
}
BagMeta::BagMeta(const BagMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      time_ordered_entries_(from.time_ordered_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_to_stats_.MergeFrom(from.topic_to_stats_);
  bag_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bag_namespace().empty()) {
    bag_namespace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bag_namespace_);
  }
  protobag_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protobag_version().empty()) {
    protobag_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protobag_version_);
  }
  if (from._internal_has_start()) {
    start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobag.BagMeta)
}

void BagMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BagMeta_ProtobagMsg_2eproto.base);
  bag_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protobag_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

BagMeta::~BagMeta() {
  // @@protoc_insertion_point(destructor:protobag.BagMeta)
  SharedDtor();
}

void BagMeta::SharedDtor() {
  bag_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protobag_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void BagMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BagMeta& BagMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BagMeta_ProtobagMsg_2eproto.base);
  return *internal_default_instance();
}


void BagMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:protobag.BagMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_to_stats_.Clear();
  time_ordered_entries_.Clear();
  bag_namespace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protobag_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BagMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bag_namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bag_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobag.BagMeta.bag_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protobag_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_protobag_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobag.BagMeta.protobag_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .protobag.BagMeta.TopicStats> topic_to_stats = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&topic_to_stats_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobag.TopicTime time_ordered_entries = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_time_ordered_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BagMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobag.BagMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bag_namespace = 1;
  if (this->bag_namespace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bag_namespace().data(), static_cast<int>(this->_internal_bag_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobag.BagMeta.bag_namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bag_namespace(), target);
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // string protobag_version = 10;
  if (this->protobag_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protobag_version().data(), static_cast<int>(this->_internal_protobag_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobag.BagMeta.protobag_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_protobag_version(), target);
  }

  // map<string, .protobag.BagMeta.TopicStats> topic_to_stats = 20;
  if (!this->_internal_topic_to_stats().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagMeta_TopicStats >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobag.BagMeta.TopicToStatsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_topic_to_stats().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_topic_to_stats().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagMeta_TopicStats >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagMeta_TopicStats >::const_iterator
          it = this->_internal_topic_to_stats().begin();
          it != this->_internal_topic_to_stats().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BagMeta_TopicToStatsEntry_DoNotUse::Funcs::InternalSerialize(20, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagMeta_TopicStats >::const_iterator
          it = this->_internal_topic_to_stats().begin();
          it != this->_internal_topic_to_stats().end(); ++it) {
        target = BagMeta_TopicToStatsEntry_DoNotUse::Funcs::InternalSerialize(20, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .protobag.TopicTime time_ordered_entries = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_ordered_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_time_ordered_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobag.BagMeta)
  return target;
}

size_t BagMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobag.BagMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .protobag.BagMeta.TopicStats> topic_to_stats = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_topic_to_stats_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagMeta_TopicStats >::const_iterator
      it = this->_internal_topic_to_stats().begin();
      it != this->_internal_topic_to_stats().end(); ++it) {
    total_size += BagMeta_TopicToStatsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protobag.TopicTime time_ordered_entries = 30;
  total_size += 2UL * this->_internal_time_ordered_entries_size();
  for (const auto& msg : this->time_ordered_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string bag_namespace = 1;
  if (this->bag_namespace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bag_namespace());
  }

  // string protobag_version = 10;
  if (this->protobag_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protobag_version());
  }

  // .google.protobuf.Timestamp start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BagMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobag.BagMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const BagMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BagMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobag.BagMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobag.BagMeta)
    MergeFrom(*source);
  }
}

void BagMeta::MergeFrom(const BagMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobag.BagMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topic_to_stats_.MergeFrom(from.topic_to_stats_);
  time_ordered_entries_.MergeFrom(from.time_ordered_entries_);
  if (from.bag_namespace().size() > 0) {

    bag_namespace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bag_namespace_);
  }
  if (from.protobag_version().size() > 0) {

    protobag_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protobag_version_);
  }
  if (from.has_start()) {
    _internal_mutable_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
}

void BagMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobag.BagMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagMeta::CopyFrom(const BagMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobag.BagMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagMeta::IsInitialized() const {
  return true;
}

void BagMeta::InternalSwap(BagMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_to_stats_.Swap(&other->topic_to_stats_);
  time_ordered_entries_.InternalSwap(&other->time_ordered_entries_);
  bag_namespace_.Swap(&other->bag_namespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protobag_version_.Swap(&other->protobag_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BagMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobag::StampedMessage* Arena::CreateMaybeMessage< ::protobag::StampedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::StampedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::StdMsg_Bool* Arena::CreateMaybeMessage< ::protobag::StdMsg_Bool >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::StdMsg_Bool >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::StdMsg_Int* Arena::CreateMaybeMessage< ::protobag::StdMsg_Int >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::StdMsg_Int >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::StdMsg_Float* Arena::CreateMaybeMessage< ::protobag::StdMsg_Float >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::StdMsg_Float >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::StdMsg_String* Arena::CreateMaybeMessage< ::protobag::StdMsg_String >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::StdMsg_String >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::StdMsg_Bytes* Arena::CreateMaybeMessage< ::protobag::StdMsg_Bytes >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::StdMsg_Bytes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::StdMsg* Arena::CreateMaybeMessage< ::protobag::StdMsg >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::StdMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::TopicTime* Arena::CreateMaybeMessage< ::protobag::TopicTime >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::TopicTime >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::Selection_Window* Arena::CreateMaybeMessage< ::protobag::Selection_Window >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::Selection_Window >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::Selection_Events* Arena::CreateMaybeMessage< ::protobag::Selection_Events >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::Selection_Events >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::Selection* Arena::CreateMaybeMessage< ::protobag::Selection >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::Selection >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::BagMeta_TopicStats* Arena::CreateMaybeMessage< ::protobag::BagMeta_TopicStats >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::BagMeta_TopicStats >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::BagMeta_TopicToStatsEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobag::BagMeta_TopicToStatsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::BagMeta_TopicToStatsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobag::BagMeta* Arena::CreateMaybeMessage< ::protobag::BagMeta >(Arena* arena) {
  return Arena::CreateInternal< ::protobag::BagMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
