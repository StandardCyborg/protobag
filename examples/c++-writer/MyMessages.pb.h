// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyMessages_2eproto;
namespace my_messages {
class DinoHunter;
class DinoHunterDefaultTypeInternal;
extern DinoHunterDefaultTypeInternal _DinoHunter_default_instance_;
class DinoHunterCollection;
class DinoHunterCollectionDefaultTypeInternal;
extern DinoHunterCollectionDefaultTypeInternal _DinoHunterCollection_default_instance_;
class DinoHunter_AttribsEntry_DoNotUse;
class DinoHunter_AttribsEntry_DoNotUseDefaultTypeInternal;
extern DinoHunter_AttribsEntry_DoNotUseDefaultTypeInternal _DinoHunter_AttribsEntry_DoNotUse_default_instance_;
class DinoHunter_Dino;
class DinoHunter_DinoDefaultTypeInternal;
extern DinoHunter_DinoDefaultTypeInternal _DinoHunter_Dino_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace my_messages
PROTOBUF_NAMESPACE_OPEN
template<> ::my_messages::DinoHunter* Arena::CreateMaybeMessage<::my_messages::DinoHunter>(Arena*);
template<> ::my_messages::DinoHunterCollection* Arena::CreateMaybeMessage<::my_messages::DinoHunterCollection>(Arena*);
template<> ::my_messages::DinoHunter_AttribsEntry_DoNotUse* Arena::CreateMaybeMessage<::my_messages::DinoHunter_AttribsEntry_DoNotUse>(Arena*);
template<> ::my_messages::DinoHunter_Dino* Arena::CreateMaybeMessage<::my_messages::DinoHunter_Dino>(Arena*);
template<> ::my_messages::Position* Arena::CreateMaybeMessage<::my_messages::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace my_messages {

enum DinoHunter_DinoType : int {
  DinoHunter_DinoType_VEGGIESAURUS = 0,
  DinoHunter_DinoType_MEATIESAURUS = 1,
  DinoHunter_DinoType_PEOPLEEATINGSAURUS = 2,
  DinoHunter_DinoType_DinoHunter_DinoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DinoHunter_DinoType_DinoHunter_DinoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DinoHunter_DinoType_IsValid(int value);
constexpr DinoHunter_DinoType DinoHunter_DinoType_DinoType_MIN = DinoHunter_DinoType_VEGGIESAURUS;
constexpr DinoHunter_DinoType DinoHunter_DinoType_DinoType_MAX = DinoHunter_DinoType_PEOPLEEATINGSAURUS;
constexpr int DinoHunter_DinoType_DinoType_ARRAYSIZE = DinoHunter_DinoType_DinoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DinoHunter_DinoType_descriptor();
template<typename T>
inline const std::string& DinoHunter_DinoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DinoHunter_DinoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DinoHunter_DinoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DinoHunter_DinoType_descriptor(), enum_t_value);
}
inline bool DinoHunter_DinoType_Parse(
    const std::string& name, DinoHunter_DinoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DinoHunter_DinoType>(
    DinoHunter_DinoType_descriptor(), name, value);
}
// ===================================================================

class DinoHunter_AttribsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DinoHunter_AttribsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DinoHunter_AttribsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DinoHunter_AttribsEntry_DoNotUse();
  DinoHunter_AttribsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DinoHunter_AttribsEntry_DoNotUse& other);
  static const DinoHunter_AttribsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DinoHunter_AttribsEntry_DoNotUse*>(&_DinoHunter_AttribsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "my_messages.DinoHunter.AttribsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "my_messages.DinoHunter.AttribsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyMessages_2eproto);
    return ::descriptor_table_MyMessages_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class DinoHunter_Dino :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my_messages.DinoHunter.Dino) */ {
 public:
  DinoHunter_Dino();
  virtual ~DinoHunter_Dino();

  DinoHunter_Dino(const DinoHunter_Dino& from);
  DinoHunter_Dino(DinoHunter_Dino&& from) noexcept
    : DinoHunter_Dino() {
    *this = ::std::move(from);
  }

  inline DinoHunter_Dino& operator=(const DinoHunter_Dino& from) {
    CopyFrom(from);
    return *this;
  }
  inline DinoHunter_Dino& operator=(DinoHunter_Dino&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DinoHunter_Dino& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DinoHunter_Dino* internal_default_instance() {
    return reinterpret_cast<const DinoHunter_Dino*>(
               &_DinoHunter_Dino_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DinoHunter_Dino& a, DinoHunter_Dino& b) {
    a.Swap(&b);
  }
  inline void Swap(DinoHunter_Dino* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DinoHunter_Dino* New() const final {
    return CreateMaybeMessage<DinoHunter_Dino>(nullptr);
  }

  DinoHunter_Dino* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DinoHunter_Dino>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DinoHunter_Dino& from);
  void MergeFrom(const DinoHunter_Dino& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DinoHunter_Dino* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my_messages.DinoHunter.Dino";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyMessages_2eproto);
    return ::descriptor_table_MyMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .my_messages.DinoHunter.DinoType type = 2;
  void clear_type();
  ::my_messages::DinoHunter_DinoType type() const;
  void set_type(::my_messages::DinoHunter_DinoType value);
  private:
  ::my_messages::DinoHunter_DinoType _internal_type() const;
  void _internal_set_type(::my_messages::DinoHunter_DinoType value);
  public:

  // @@protoc_insertion_point(class_scope:my_messages.DinoHunter.Dino)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyMessages_2eproto;
};
// -------------------------------------------------------------------

class DinoHunter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my_messages.DinoHunter) */ {
 public:
  DinoHunter();
  virtual ~DinoHunter();

  DinoHunter(const DinoHunter& from);
  DinoHunter(DinoHunter&& from) noexcept
    : DinoHunter() {
    *this = ::std::move(from);
  }

  inline DinoHunter& operator=(const DinoHunter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DinoHunter& operator=(DinoHunter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DinoHunter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DinoHunter* internal_default_instance() {
    return reinterpret_cast<const DinoHunter*>(
               &_DinoHunter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DinoHunter& a, DinoHunter& b) {
    a.Swap(&b);
  }
  inline void Swap(DinoHunter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DinoHunter* New() const final {
    return CreateMaybeMessage<DinoHunter>(nullptr);
  }

  DinoHunter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DinoHunter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DinoHunter& from);
  void MergeFrom(const DinoHunter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DinoHunter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my_messages.DinoHunter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyMessages_2eproto);
    return ::descriptor_table_MyMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DinoHunter_Dino Dino;

  typedef DinoHunter_DinoType DinoType;
  static constexpr DinoType VEGGIESAURUS =
    DinoHunter_DinoType_VEGGIESAURUS;
  static constexpr DinoType MEATIESAURUS =
    DinoHunter_DinoType_MEATIESAURUS;
  static constexpr DinoType PEOPLEEATINGSAURUS =
    DinoHunter_DinoType_PEOPLEEATINGSAURUS;
  static inline bool DinoType_IsValid(int value) {
    return DinoHunter_DinoType_IsValid(value);
  }
  static constexpr DinoType DinoType_MIN =
    DinoHunter_DinoType_DinoType_MIN;
  static constexpr DinoType DinoType_MAX =
    DinoHunter_DinoType_DinoType_MAX;
  static constexpr int DinoType_ARRAYSIZE =
    DinoHunter_DinoType_DinoType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DinoType_descriptor() {
    return DinoHunter_DinoType_descriptor();
  }
  template<typename T>
  static inline const std::string& DinoType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DinoType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DinoType_Name.");
    return DinoHunter_DinoType_Name(enum_t_value);
  }
  static inline bool DinoType_Parse(const std::string& name,
      DinoType* value) {
    return DinoHunter_DinoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttribsFieldNumber = 3,
    kDinosFieldNumber = 4,
    kFirstNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // map<string, string> attribs = 3;
  int attribs_size() const;
  private:
  int _internal_attribs_size() const;
  public:
  void clear_attribs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attribs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attribs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attribs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attribs();

  // repeated .my_messages.DinoHunter.Dino dinos = 4;
  int dinos_size() const;
  private:
  int _internal_dinos_size() const;
  public:
  void clear_dinos();
  ::my_messages::DinoHunter_Dino* mutable_dinos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::my_messages::DinoHunter_Dino >*
      mutable_dinos();
  private:
  const ::my_messages::DinoHunter_Dino& _internal_dinos(int index) const;
  ::my_messages::DinoHunter_Dino* _internal_add_dinos();
  public:
  const ::my_messages::DinoHunter_Dino& dinos(int index) const;
  ::my_messages::DinoHunter_Dino* add_dinos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::my_messages::DinoHunter_Dino >&
      dinos() const;

  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:my_messages.DinoHunter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DinoHunter_AttribsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > attribs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::my_messages::DinoHunter_Dino > dinos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyMessages_2eproto;
};
// -------------------------------------------------------------------

class DinoHunterCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my_messages.DinoHunterCollection) */ {
 public:
  DinoHunterCollection();
  virtual ~DinoHunterCollection();

  DinoHunterCollection(const DinoHunterCollection& from);
  DinoHunterCollection(DinoHunterCollection&& from) noexcept
    : DinoHunterCollection() {
    *this = ::std::move(from);
  }

  inline DinoHunterCollection& operator=(const DinoHunterCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline DinoHunterCollection& operator=(DinoHunterCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DinoHunterCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DinoHunterCollection* internal_default_instance() {
    return reinterpret_cast<const DinoHunterCollection*>(
               &_DinoHunterCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DinoHunterCollection& a, DinoHunterCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(DinoHunterCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DinoHunterCollection* New() const final {
    return CreateMaybeMessage<DinoHunterCollection>(nullptr);
  }

  DinoHunterCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DinoHunterCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DinoHunterCollection& from);
  void MergeFrom(const DinoHunterCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DinoHunterCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my_messages.DinoHunterCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyMessages_2eproto);
    return ::descriptor_table_MyMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHuntersFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .my_messages.DinoHunter hunters = 2;
  bool has_hunters() const;
  private:
  bool _internal_has_hunters() const;
  public:
  void clear_hunters();
  const ::my_messages::DinoHunter& hunters() const;
  ::my_messages::DinoHunter* release_hunters();
  ::my_messages::DinoHunter* mutable_hunters();
  void set_allocated_hunters(::my_messages::DinoHunter* hunters);
  private:
  const ::my_messages::DinoHunter& _internal_hunters() const;
  ::my_messages::DinoHunter* _internal_mutable_hunters();
  public:

  // @@protoc_insertion_point(class_scope:my_messages.DinoHunterCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::my_messages::DinoHunter* hunters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyMessages_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my_messages.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my_messages.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyMessages_2eproto);
    return ::descriptor_table_MyMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:my_messages.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DinoHunter_Dino

// string name = 1;
inline void DinoHunter_Dino::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DinoHunter_Dino::name() const {
  // @@protoc_insertion_point(field_get:my_messages.DinoHunter.Dino.name)
  return _internal_name();
}
inline void DinoHunter_Dino::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:my_messages.DinoHunter.Dino.name)
}
inline std::string* DinoHunter_Dino::mutable_name() {
  // @@protoc_insertion_point(field_mutable:my_messages.DinoHunter.Dino.name)
  return _internal_mutable_name();
}
inline const std::string& DinoHunter_Dino::_internal_name() const {
  return name_.GetNoArena();
}
inline void DinoHunter_Dino::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DinoHunter_Dino::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:my_messages.DinoHunter.Dino.name)
}
inline void DinoHunter_Dino::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_messages.DinoHunter.Dino.name)
}
inline void DinoHunter_Dino::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_messages.DinoHunter.Dino.name)
}
inline std::string* DinoHunter_Dino::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DinoHunter_Dino::release_name() {
  // @@protoc_insertion_point(field_release:my_messages.DinoHunter.Dino.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DinoHunter_Dino::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:my_messages.DinoHunter.Dino.name)
}

// .my_messages.DinoHunter.DinoType type = 2;
inline void DinoHunter_Dino::clear_type() {
  type_ = 0;
}
inline ::my_messages::DinoHunter_DinoType DinoHunter_Dino::_internal_type() const {
  return static_cast< ::my_messages::DinoHunter_DinoType >(type_);
}
inline ::my_messages::DinoHunter_DinoType DinoHunter_Dino::type() const {
  // @@protoc_insertion_point(field_get:my_messages.DinoHunter.Dino.type)
  return _internal_type();
}
inline void DinoHunter_Dino::_internal_set_type(::my_messages::DinoHunter_DinoType value) {
  
  type_ = value;
}
inline void DinoHunter_Dino::set_type(::my_messages::DinoHunter_DinoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:my_messages.DinoHunter.Dino.type)
}

// -------------------------------------------------------------------

// DinoHunter

// string first_name = 1;
inline void DinoHunter::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DinoHunter::first_name() const {
  // @@protoc_insertion_point(field_get:my_messages.DinoHunter.first_name)
  return _internal_first_name();
}
inline void DinoHunter::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:my_messages.DinoHunter.first_name)
}
inline std::string* DinoHunter::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:my_messages.DinoHunter.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& DinoHunter::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void DinoHunter::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DinoHunter::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:my_messages.DinoHunter.first_name)
}
inline void DinoHunter::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_messages.DinoHunter.first_name)
}
inline void DinoHunter::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_messages.DinoHunter.first_name)
}
inline std::string* DinoHunter::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DinoHunter::release_first_name() {
  // @@protoc_insertion_point(field_release:my_messages.DinoHunter.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DinoHunter::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:my_messages.DinoHunter.first_name)
}

// int32 id = 2;
inline void DinoHunter::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DinoHunter::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DinoHunter::id() const {
  // @@protoc_insertion_point(field_get:my_messages.DinoHunter.id)
  return _internal_id();
}
inline void DinoHunter::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DinoHunter::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:my_messages.DinoHunter.id)
}

// map<string, string> attribs = 3;
inline int DinoHunter::_internal_attribs_size() const {
  return attribs_.size();
}
inline int DinoHunter::attribs_size() const {
  return _internal_attribs_size();
}
inline void DinoHunter::clear_attribs() {
  attribs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DinoHunter::_internal_attribs() const {
  return attribs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DinoHunter::attribs() const {
  // @@protoc_insertion_point(field_map:my_messages.DinoHunter.attribs)
  return _internal_attribs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DinoHunter::_internal_mutable_attribs() {
  return attribs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DinoHunter::mutable_attribs() {
  // @@protoc_insertion_point(field_mutable_map:my_messages.DinoHunter.attribs)
  return _internal_mutable_attribs();
}

// repeated .my_messages.DinoHunter.Dino dinos = 4;
inline int DinoHunter::_internal_dinos_size() const {
  return dinos_.size();
}
inline int DinoHunter::dinos_size() const {
  return _internal_dinos_size();
}
inline void DinoHunter::clear_dinos() {
  dinos_.Clear();
}
inline ::my_messages::DinoHunter_Dino* DinoHunter::mutable_dinos(int index) {
  // @@protoc_insertion_point(field_mutable:my_messages.DinoHunter.dinos)
  return dinos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::my_messages::DinoHunter_Dino >*
DinoHunter::mutable_dinos() {
  // @@protoc_insertion_point(field_mutable_list:my_messages.DinoHunter.dinos)
  return &dinos_;
}
inline const ::my_messages::DinoHunter_Dino& DinoHunter::_internal_dinos(int index) const {
  return dinos_.Get(index);
}
inline const ::my_messages::DinoHunter_Dino& DinoHunter::dinos(int index) const {
  // @@protoc_insertion_point(field_get:my_messages.DinoHunter.dinos)
  return _internal_dinos(index);
}
inline ::my_messages::DinoHunter_Dino* DinoHunter::_internal_add_dinos() {
  return dinos_.Add();
}
inline ::my_messages::DinoHunter_Dino* DinoHunter::add_dinos() {
  // @@protoc_insertion_point(field_add:my_messages.DinoHunter.dinos)
  return _internal_add_dinos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::my_messages::DinoHunter_Dino >&
DinoHunter::dinos() const {
  // @@protoc_insertion_point(field_list:my_messages.DinoHunter.dinos)
  return dinos_;
}

// -------------------------------------------------------------------

// DinoHunterCollection

// string name = 1;
inline void DinoHunterCollection::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DinoHunterCollection::name() const {
  // @@protoc_insertion_point(field_get:my_messages.DinoHunterCollection.name)
  return _internal_name();
}
inline void DinoHunterCollection::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:my_messages.DinoHunterCollection.name)
}
inline std::string* DinoHunterCollection::mutable_name() {
  // @@protoc_insertion_point(field_mutable:my_messages.DinoHunterCollection.name)
  return _internal_mutable_name();
}
inline const std::string& DinoHunterCollection::_internal_name() const {
  return name_.GetNoArena();
}
inline void DinoHunterCollection::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DinoHunterCollection::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:my_messages.DinoHunterCollection.name)
}
inline void DinoHunterCollection::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_messages.DinoHunterCollection.name)
}
inline void DinoHunterCollection::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_messages.DinoHunterCollection.name)
}
inline std::string* DinoHunterCollection::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DinoHunterCollection::release_name() {
  // @@protoc_insertion_point(field_release:my_messages.DinoHunterCollection.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DinoHunterCollection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:my_messages.DinoHunterCollection.name)
}

// .my_messages.DinoHunter hunters = 2;
inline bool DinoHunterCollection::_internal_has_hunters() const {
  return this != internal_default_instance() && hunters_ != nullptr;
}
inline bool DinoHunterCollection::has_hunters() const {
  return _internal_has_hunters();
}
inline void DinoHunterCollection::clear_hunters() {
  if (GetArenaNoVirtual() == nullptr && hunters_ != nullptr) {
    delete hunters_;
  }
  hunters_ = nullptr;
}
inline const ::my_messages::DinoHunter& DinoHunterCollection::_internal_hunters() const {
  const ::my_messages::DinoHunter* p = hunters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::my_messages::DinoHunter*>(
      &::my_messages::_DinoHunter_default_instance_);
}
inline const ::my_messages::DinoHunter& DinoHunterCollection::hunters() const {
  // @@protoc_insertion_point(field_get:my_messages.DinoHunterCollection.hunters)
  return _internal_hunters();
}
inline ::my_messages::DinoHunter* DinoHunterCollection::release_hunters() {
  // @@protoc_insertion_point(field_release:my_messages.DinoHunterCollection.hunters)
  
  ::my_messages::DinoHunter* temp = hunters_;
  hunters_ = nullptr;
  return temp;
}
inline ::my_messages::DinoHunter* DinoHunterCollection::_internal_mutable_hunters() {
  
  if (hunters_ == nullptr) {
    auto* p = CreateMaybeMessage<::my_messages::DinoHunter>(GetArenaNoVirtual());
    hunters_ = p;
  }
  return hunters_;
}
inline ::my_messages::DinoHunter* DinoHunterCollection::mutable_hunters() {
  // @@protoc_insertion_point(field_mutable:my_messages.DinoHunterCollection.hunters)
  return _internal_mutable_hunters();
}
inline void DinoHunterCollection::set_allocated_hunters(::my_messages::DinoHunter* hunters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hunters_;
  }
  if (hunters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hunters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hunters, submessage_arena);
    }
    
  } else {
    
  }
  hunters_ = hunters;
  // @@protoc_insertion_point(field_set_allocated:my_messages.DinoHunterCollection.hunters)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:my_messages.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:my_messages.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:my_messages.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:my_messages.Position.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace my_messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::my_messages::DinoHunter_DinoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::my_messages::DinoHunter_DinoType>() {
  return ::my_messages::DinoHunter_DinoType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyMessages_2eproto
